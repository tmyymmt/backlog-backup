name: Create Release

on:
  push:
    branches:
      - main

jobs:
  prepare_release:
    name: Prepare Release
    runs-on: ubuntu-latest
    # Only run when a PR is merged (not on direct commits to main)
    if: contains(github.event.head_commit.message, 'Merge pull request')
    outputs:
      new_version: ${{ steps.calc_version.outputs.new_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Get current version
        id: get_version
        run: |
          if [[ -f backlog_backup/__init__.py ]]; then
            CURRENT_VERSION=$(grep -o "__version__ = '[0-9]*\.[0-9]*\.[0-9]*'" backlog_backup/__init__.py | grep -o "[0-9]*\.[0-9]*\.[0-9]*")
            if [[ -z "$CURRENT_VERSION" ]]; then
              echo "Error: Could not extract version from __init__.py"
              exit 1
            fi
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "Current version: $CURRENT_VERSION"
          else
            echo "Error: __init__.py file not found"
            exit 1
          fi
      
      - name: Calculate new version
        id: calc_version
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.current_version }}
          # Split version into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"
  
  build_binaries:
    name: Build Binary for ${{ matrix.os }}
    needs: prepare_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: backlog-backup-linux
            binary_name: backlog-backup
          - os: windows-latest
            artifact_name: backlog-backup-windows
            binary_name: backlog-backup.exe
          - os: macos-latest
            artifact_name: backlog-backup-macos
            binary_name: backlog-backup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -e .
          pip install -e ".[scraping]"
      
      - name: Build binary with PyInstaller
        run: pyinstaller --onefile --name ${{ matrix.artifact_name }} backlog_backup/cli.py
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.artifact_name }}${{ runner.os == 'Windows' && '.exe' || '' }}
          retention-days: 1

  create_release:
    name: Create Release
    needs: [prepare_release, build_binaries]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare_release.outputs.new_version }}
          name: Release v${{ needs.prepare_release.outputs.new_version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/backlog-backup-linux/backlog-backup-linux
            artifacts/backlog-backup-windows/backlog-backup-windows.exe
            artifacts/backlog-backup-macos/backlog-backup-macos